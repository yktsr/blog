<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>電気羊と砂嵐の夢 - security</title><link href="https://yktsr.github.io/" rel="alternate"></link><link href="https://yktsr.github.io/feeds/security.atom.xml" rel="self"></link><id>https://yktsr.github.io/</id><updated>2017-05-24T18:16:00+09:00</updated><entry><title>USBプロトコル解析</title><link href="https://yktsr.github.io/usb-protocol-analyzer.html" rel="alternate"></link><published>2017-05-24T18:16:00+09:00</published><updated>2017-05-24T18:16:00+09:00</updated><author><name>yktsr</name></author><id>tag:yktsr.github.io,2017-05-24:/usb-protocol-analyzer.html</id><summary type="html">&lt;p&gt;Virtual USB AnalyzerとVMwareを利用し、仮想USBからパケットを解析する&lt;/p&gt;</summary><content type="html">&lt;p&gt;シリアル通信を開始したものの、なぜか繋がらない。断線しているのか？
USBプロトコル・アナライザなんて高価なものは持ってないし、
確かめようにもオシロスコープは手元にないし、グランドがどの端子なのかもわからないし..... (´-ω-`) &lt;/p&gt;
&lt;p&gt;なんとかならないか......
&lt;a href="http://vusb-analyzer.sourceforge.net/"&gt;Virtual Usb Analyzer&lt;/a&gt;などという神ツールを発見。早速やってみる&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.vmware.com/products/player/playerpro-evaluation.html"&gt;VMware&lt;/a&gt;を拾ってきてインストール&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VMwareに適当なOS(Ubuntuなど）をインストール&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ホスト側PCで&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install vusb-analyzer
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;VMwareのゲストOSがインストールされているフォルダ内、vmxファイルに以下を追記する&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   monitor = &amp;quot;debug&amp;quot;
   usb.analyzer.enable = TRUE
   usb.analyzer.maxLine = 8192
   mouse.vusb.enable = FALSE
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;シリアル通信を開始&lt;/li&gt;
&lt;li&gt;VMwareのゲストOSがインストールされているフォルダ内、vmware.logにUSBのログが吐き出される&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep USBIO vmware.log &amp;gt; vmware-usb.log
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;vusb-analyzer vmware-usb.log&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;VM使わなくても、Wiresharkでできたのか...&lt;/p&gt;</content><category term="security"></category><category term="usb"></category><category term="protocol"></category></entry><entry><title>Proxy設定まとめ</title><link href="https://yktsr.github.io/overproxy.html" rel="alternate"></link><published>2017-05-22T17:31:00+09:00</published><updated>2017-05-22T17:31:00+09:00</updated><author><name>yktsr</name></author><id>tag:yktsr.github.io,2017-05-22:/overproxy.html</id><summary type="html">&lt;p&gt;ありとあらゆるProxyを超えてみる&lt;/p&gt;</summary><content type="html">&lt;p&gt;ご利用は自己責任で。&lt;/p&gt;
&lt;p&gt;Proxyはときに守ってくれるようで、時には爆発してほしいと思うこともある。&lt;/p&gt;
&lt;p&gt;仲良く付き合うためのtips&lt;/p&gt;
&lt;h2&gt;環境変数を解釈してくれる場合&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;http_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://proxy-server:8080
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;https_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://proxy-server:8080
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;github&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git config --global http.proxy http://proxy-server:8000
$ git config --global https.proxy http://proxy-server:8000
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;wget&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# vim /etc/wgetrc&lt;/span&gt;
$ vim ~/.wgetrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;に以下を追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;http_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://proxy-server:8000
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;curl&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim ~/.curlrc
&lt;span class="nv"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://proxy-server:8000
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;npm&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm -g config &lt;span class="nb"&gt;set&lt;/span&gt; proxy http://proxy-server:8000
$ npm -g config &lt;span class="nb"&gt;set&lt;/span&gt; https-proxy http://proxy-server:8000
$ npm -g config &lt;span class="nb"&gt;set&lt;/span&gt; registry http://registry.npmjs.org/
$ npm config list
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;pip&lt;/h2&gt;
&lt;p&gt;設定ファイルでするやり方が分からなかったので, aliasでコマンドを上書きする.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim ~/.bash_rc
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pip3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pip3 --proxy=proxy-server:8000&amp;#39;&lt;/span&gt;
$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bash_rc または $ . ~/.bash_rc
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ATOM&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apm config &lt;span class="nb"&gt;set&lt;/span&gt; https-proxy http://proxy-server:8000
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;SSH&lt;/h2&gt;
&lt;p&gt;proxycommandなるものが用意されている。これは入力を標準入力から受け取り、出力を標準出力へ返すフィルタを指定する。
ここに透過プロキシとして動作するコマンドを指定する。
例えば、GithubへProxyを経由してSSH接続する場合（SSH over HTTPS）、
次のように設定ファイルを指定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat ~/.ssh/config
Host github.com
  HostName ssh.github.com
  port 443
  ProxyCommand ncat --proxy &lt;span class="s2"&gt;&amp;quot;proxy-server:8000&amp;quot;&lt;/span&gt; %h %p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ただし、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# apt install nc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここで用いるnetcat(nc, ncatなど)にはオリジナル版、nmap付属版など複数あるらしく、現在はnmapに付属しているものが高機能なようだ&lt;/p&gt;
&lt;p&gt;ここで、ncatはフィルタであるので、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET /&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ncat --proxy proxy-server:8000 google.com 80
HTTP/1.0 &lt;span class="m"&gt;302&lt;/span&gt; Found
Cache-Control: private
Content-Type: text/html&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;UTF-8
Referrer-Policy: no-referrer
Location: http://www.google.co.jp/?gfe_rd&lt;span class="o"&gt;=&lt;/span&gt;cr&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;ei&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
Content-Length: 261
Date: Mon, &lt;span class="m"&gt;22&lt;/span&gt; May &lt;span class="m"&gt;2017&lt;/span&gt; 08:49:27 GMT

&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/html;charset=utf-8&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;TITLE&amp;gt;302 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;
&amp;lt;H1&amp;gt;302 Moved&amp;lt;/H1&amp;gt;
The document has moved
&amp;lt;A &lt;span class="nv"&gt;HREF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.google.co.jp/?gfe_rd=cr&amp;amp;amp;ei=&amp;quot;&lt;/span&gt;&amp;gt;here&amp;lt;/A&amp;gt;.
&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ということもできる。
もし、標準入出力ですべての操作が行えるのであればこのような方法も可能だ。&lt;/p&gt;
&lt;h2&gt;これら以外で超える&lt;/h2&gt;
&lt;p&gt;まだ万策尽きてはない。
&lt;a href="https://github.com/rofl0r/proxychains-ng"&gt;proxychains-ng&lt;/a&gt;で強引に超えてみる。
proxychains-ngはネットワーク系のライブラリを置き換え、任意のコマンドでProxyを利用させる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ unzip proxychains-ng-master.zip
$ ./configure
$ make
$ sudo make install

$ sudo vi /etc/proxychains.conf
strict_chain

&lt;span class="o"&gt;[&lt;/span&gt;ProxyList&lt;span class="o"&gt;]&lt;/span&gt;
http YOUR_PROXY_IP_ADDRESS PORT


$ proxychains4 curl http://example.com/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例えば、SSHなら上のSSHの設定を行わなくとも&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ proxychains4 ssh -T github.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で接続することができる。&lt;/p&gt;
&lt;h2&gt;もぅﾏﾁﾞ無理......浅漬けにしよ&lt;/h2&gt;
&lt;p&gt;これらでも回避できない場合、外のサーバを踏み台にする。
SSHを使って外のサーバとVPNを構築し、VPNの中を通って外と通信させることを考える。
&lt;a href="http://www.unixuser.org/~euske/doc/openssh/book/chap6.html#real-vpn"&gt;参考にさせて頂いたサイト&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# cat /root/.ssh/config&lt;/span&gt;
Host 192.168.1.128
    Hostname            192.168.1.128
    Tunnel              point-to-point
    TunnelDevice        0:0
    PermitLocalCommand  yes
    LocalCommand        &lt;span class="o"&gt;(&lt;/span&gt; ifconfig tun0 192.168.3.2 pointopoint 192.168.3.1 &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;

&lt;span class="c1"&gt;# ssh root@192.168.1.128&lt;/span&gt;
&lt;span class="c1"&gt;# ifconfig tun0 192.168.3.1 pointopoint 192.168.3.2&lt;/span&gt;
&lt;span class="c1"&gt;# ifconfig&lt;/span&gt;
tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
      inet addr:192.168.3.1  P-t-P:192.168.3.2  Mask:255.255.255.255
      UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1
      RX packets:12 errors:0 dropped:10 overruns:0 frame:0
      TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
      collisions:0 txqueuelen:500
      RX bytes:1288 &lt;span class="o"&gt;(&lt;/span&gt;1.2 KB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:0 &lt;span class="o"&gt;(&lt;/span&gt;0.0 B&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# ping 192.168.3.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あとはルーティングとかなんやかんやを設定する。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.unixuser.org/~euske/doc/openssh/book/appendix.html"&gt;入門OpenSSH 様&lt;/a&gt;
&lt;br&gt;SSHのありとあらゆる機能が書かれています&lt;/p&gt;
&lt;p&gt;&lt;a href="http://inaz2.hatenablog.com/entry/2014/08/20/004106"&gt;ももいろテクノロジー 様&lt;/a&gt;&lt;/p&gt;</content><category term="proxy"></category><category term="security"></category></entry></feed>